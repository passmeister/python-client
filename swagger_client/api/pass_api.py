# coding: utf-8

"""
    Demo Client for Passmeister Apple Wallet and Google Wallet API

    [www.passmeister.com](https://www.passmeister.com).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PassApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_or_update_pass(self, pass_type_id, **kwargs):  # noqa: E501
        """This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.  # noqa: E501

        This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_pass(pass_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :param object pass_id: id of the pass (provided by you when creating the pass or automatically set by passmeister)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_pass_with_http_info(pass_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_pass_with_http_info(pass_type_id, **kwargs)  # noqa: E501
            return data

    def create_or_update_pass_with_http_info(self, pass_type_id, **kwargs):  # noqa: E501
        """This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.  # noqa: E501

        This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_pass_with_http_info(pass_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :param object pass_id: id of the pass (provided by you when creating the pass or automatically set by passmeister)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pass_type_id', 'pass_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_pass" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pass_type_id' is set
        if self.api_client.client_side_validation and ('pass_type_id' not in params or
                                                       params['pass_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pass_type_id` when calling `create_or_update_pass`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pass_type_id' in params:
            query_params.append(('passTypeId', params['pass_type_id']))  # noqa: E501
        if 'pass_id' in params:
            query_params.append(('passId', params['pass_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pass', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pass(self, pass_type_id, pass_id, **kwargs):  # noqa: E501
        """Delete pass by pass id.  # noqa: E501

        Delete pass by pass id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pass(pass_type_id, pass_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :param object pass_id: id of the pass (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pass_with_http_info(pass_type_id, pass_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pass_with_http_info(pass_type_id, pass_id, **kwargs)  # noqa: E501
            return data

    def delete_pass_with_http_info(self, pass_type_id, pass_id, **kwargs):  # noqa: E501
        """Delete pass by pass id.  # noqa: E501

        Delete pass by pass id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pass_with_http_info(pass_type_id, pass_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :param object pass_id: id of the pass (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pass_type_id', 'pass_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pass" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pass_type_id' is set
        if self.api_client.client_side_validation and ('pass_type_id' not in params or
                                                       params['pass_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pass_type_id` when calling `delete_pass`")  # noqa: E501
        # verify the required parameter 'pass_id' is set
        if self.api_client.client_side_validation and ('pass_id' not in params or
                                                       params['pass_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pass_id` when calling `delete_pass`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pass_type_id' in params:
            query_params.append(('passTypeId', params['pass_type_id']))  # noqa: E501
        if 'pass_id' in params:
            query_params.append(('passId', params['pass_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pass', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pass(self, pass_type_id, pass_id, **kwargs):  # noqa: E501
        """Get pass information by pass id.  # noqa: E501

        Get pass information by pass id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pass(pass_type_id, pass_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :param object pass_id: id of the pass (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pass_with_http_info(pass_type_id, pass_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pass_with_http_info(pass_type_id, pass_id, **kwargs)  # noqa: E501
            return data

    def get_pass_with_http_info(self, pass_type_id, pass_id, **kwargs):  # noqa: E501
        """Get pass information by pass id.  # noqa: E501

        Get pass information by pass id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pass_with_http_info(pass_type_id, pass_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :param object pass_id: id of the pass (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pass_type_id', 'pass_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pass" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pass_type_id' is set
        if self.api_client.client_side_validation and ('pass_type_id' not in params or
                                                       params['pass_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pass_type_id` when calling `get_pass`")  # noqa: E501
        # verify the required parameter 'pass_id' is set
        if self.api_client.client_side_validation and ('pass_id' not in params or
                                                       params['pass_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pass_id` when calling `get_pass`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pass_type_id' in params:
            query_params.append(('passTypeId', params['pass_type_id']))  # noqa: E501
        if 'pass_id' in params:
            query_params.append(('passId', params['pass_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pass', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pass_list(self, pass_type_id, **kwargs):  # noqa: E501
        """Retrieve the list of active pass ids for a given pass type.  # noqa: E501

        Retrieve the list of active pass ids for a given pass type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pass_list(pass_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :param object page: 
        :param object limit: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pass_list_with_http_info(pass_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pass_list_with_http_info(pass_type_id, **kwargs)  # noqa: E501
            return data

    def pass_list_with_http_info(self, pass_type_id, **kwargs):  # noqa: E501
        """Retrieve the list of active pass ids for a given pass type.  # noqa: E501

        Retrieve the list of active pass ids for a given pass type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pass_list_with_http_info(pass_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :param object page: 
        :param object limit: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pass_type_id', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pass_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pass_type_id' is set
        if self.api_client.client_side_validation and ('pass_type_id' not in params or
                                                       params['pass_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pass_type_id` when calling `pass_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pass_type_id' in params:
            query_params.append(('passTypeId', params['pass_type_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pass/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pass_sync(self, pass_type_id, **kwargs):  # noqa: E501
        """Send updates to all active passes for a given pass type.  # noqa: E501

        For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pass_sync(pass_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pass_sync_with_http_info(pass_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pass_sync_with_http_info(pass_type_id, **kwargs)  # noqa: E501
            return data

    def pass_sync_with_http_info(self, pass_type_id, **kwargs):  # noqa: E501
        """Send updates to all active passes for a given pass type.  # noqa: E501

        For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pass_sync_with_http_info(pass_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pass_type_id: your pass type id, for example P963493 (Urban Fitness) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pass_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pass_sync" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pass_type_id' is set
        if self.api_client.client_side_validation and ('pass_type_id' not in params or
                                                       params['pass_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pass_type_id` when calling `pass_sync`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pass_type_id' in params:
            query_params.append(('passTypeId', params['pass_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pass/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
